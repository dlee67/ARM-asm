


ARM Macro Assembler    Page 1 


    1 00000000         ; CS1021 Assignment #1 - Hamming Codes
    2 00000000         ;
    3 00000000         ; Name: Jonathan Dukes (jdukes@scss.tcd.ie)
    4 00000000         ; Description: Generates a 12-bit Hamming Code in R0 fro
                       m an 8-bit value in R1
    5 00000000         ;              and introduces an artificial single-bit e
                       rror to the result
    6 00000000         ; 
    7 00000000         
    8 00000000                 AREA             Hamming, CODE, READONLY
    9 00000000         
   10 00000000                 ENTRY
   11 00000000         
   12 00000000                 EXPORT           main
   13 00000000         
   14 00000000         main
   15 00000000         ; Load a test value into R1
   16 00000000         
   17 00000000 F04F 01AC       LDR              R1, =0xAC
   18 00000004         
   19 00000004         ; Begin by expanding the 8-bit value to 12-bits, inserti
                       ng
   20 00000004         ; zeros in the positions for the four check bits (bit 0,
                        bit 1, bit 3
   21 00000004         ; and bit 7).
   22 00000004         
   23 00000004 F001 0201       AND              R2, R1, #0x1 ; Clear all bits a
                                                            part from d0
   24 00000008 EA4F 0082       MOV              R0, R2, LSL #2 
                                                            ; Align data bit d0
                                                            
   25 0000000C         
   26 0000000C F001 020E       AND              R2, R1, #0xE ; Clear all bits a
                                                            part from d1, d2, &
                                                             d3
   27 00000010 EA40 00C2       ORR              R0, R0, R2, LSL #3 ; Align data
                                                             bits d1, d2 & d3 a
                                                            nd combine with d0
   28 00000014         
   29 00000014 F001 02F0       AND              R2, R1, #0xF0 ; Clear all bits 
                                                            apart from d3-d7
   30 00000018 EA40 1002       ORR              R0, R0, R2, LSL #4 ; Align data
                                                             bits d4-d7 and com
                                                            bine with d0-d3
   31 0000001C         
   32 0000001C         ; We now have a 12-bit value in R0 with empty (0) check 
                       bits in
   33 0000001C         ; the correct positions
   34 0000001C         
   35 0000001C         
   36 0000001C         ; Generate check bit c0
   37 0000001C         
   38 0000001C EA80 0290       EOR              R2, R0, R0, LSR #2 ; Generate c
                                                            0 parity bit using 
                                                            parity tree
   39 00000020 EA82 1212       EOR              R2, R2, R2, LSR #4 ; ... second
                                                             iteration ...
   40 00000024 EA82 2212       EOR              R2, R2, R2, LSR #8 ; ... final 
                                                            iteration



ARM Macro Assembler    Page 2 


   41 00000028         
   42 00000028 F002 0201       AND              R2, R2, #0x1 ; Clear all but ch
                                                            eck bit c0
   43 0000002C EA40 0002       ORR              R0, R0, R2  ; Combine check bit
                                                             c0 with result
   44 00000030         
   45 00000030         ; Generate check bit c1
   46 00000030         
   47 00000030 EA80 0250       EOR              R2, R0, R0, LSR #1 ; Generate c
                                                            1 parity bit using 
                                                            parity tree
   48 00000034 EA82 1212       EOR              R2, R2, R2, LSR #4 ; ... second
                                                             iteration ...
   49 00000038 EA82 2212       EOR              R2, R2, R2, LSR #8 ; ... final 
                                                            iteration
   50 0000003C         
   51 0000003C F002 0202       AND              R2, R2, #0x2 ; Clear all but ch
                                                            eck bit c1
   52 00000040 EA40 0002       ORR              R0, R0, R2  ; Combine check bit
                                                             c1 with result
   53 00000044         
   54 00000044         ; Generate check bit c2
   55 00000044         
   56 00000044 EA80 0250       EOR              R2, R0, R0, LSR #1 ; Generate c
                                                            2 parity bit using 
                                                            parity tree
   57 00000048 EA82 0292       EOR              R2, R2, R2, LSR #2 ; ... second
                                                             iteration ...
   58 0000004C EA82 2212       EOR              R2, R2, R2, LSR #8 ; ... final 
                                                            iteration
   59 00000050         
   60 00000050 F002 0208       AND              R2, R2, #0x8 ; Clear all but ch
                                                            eck bit c2
   61 00000054 EA40 0002       ORR              R0, R0, R2  ; Combine check bit
                                                             c2 with result 
   62 00000058         
   63 00000058         ; Generate check bit c3
   64 00000058         
   65 00000058 EA80 0250       EOR              R2, R0, R0, LSR #1 ; Generate c
                                                            3 parity bit using 
                                                            parity tree
   66 0000005C EA82 0292       EOR              R2, R2, R2, LSR #2 ; ... second
                                                             iteration ...
   67 00000060 EA82 1212       EOR              R2, R2, R2, LSR #4 ; ... final 
                                                            iteration
   68 00000064         
   69 00000064 F002 0280       AND              R2, R2, #0x80 ; Clear all but c
                                                            heck bit c3
   70 00000068 EA40 0002       ORR              R0, R0, R2  ; Combine check bit
                                                             c3 with result
   71 0000006C         
   72 0000006C         ; We now have a 12-bit value with Hamming code check bit
                       s
   73 0000006C         
   74 0000006C         ; Create an artificial "error" in the encoded value by f
                       lipping a single bit
   75 0000006C         
   76 0000006C F480 7080       EOR              R0, R0, #0x100 ; Flip bit 8 to 
                                                            test



ARM Macro Assembler    Page 3 


   77 00000070         
   78 00000070         ;
   79 00000070         ; Extension starts here
   80 00000070         ; 
   81 00000070         ;
   82 00000070         
   83 00000070         
   84 00000070         ;Student Name: William Browne 
   85 00000070         ;Student number: 09389822
   86 00000070         
   87 00000070         
   88 00000070         ;Clear bits c0, c1, c3, c7
   89 00000070 F06F 038B       LDR              R3, =0XFFFFFF74
   90 00000074 EA00 0303       AND              R3, R0, R3
   91 00000078         
   92 00000078         
   93 00000078         
   94 00000078         ; Generate check bit c0
   95 00000078         
   96 00000078 EA83 0293       EOR              R2, R3, R3, LSR #2 ; Generate c
                                                            0 parity bit using 
                                                            parity tree
   97 0000007C EA82 1212       EOR              R2, R2, R2, LSR #4 ; ... second
                                                             iteration ...
   98 00000080 EA82 2212       EOR              R2, R2, R2, LSR #8 ; ... final 
                                                            iteration
   99 00000084         
  100 00000084 F002 0201       AND              R2, R2, #0x1 ; Clear all but ch
                                                            eck bit c0
  101 00000088 EA43 0302       ORR              R3, R3, R2  ; Combine check bit
                                                             c0 with result
  102 0000008C         
  103 0000008C         ; Generate check bit c1
  104 0000008C         
  105 0000008C EA83 0253       EOR              R2, R3, R3, LSR #1 ; Generate c
                                                            1 parity bit using 
                                                            parity tree
  106 00000090 EA82 1212       EOR              R2, R2, R2, LSR #4 ; ... second
                                                             iteration ...
  107 00000094 EA82 2212       EOR              R2, R2, R2, LSR #8 ; ... final 
                                                            iteration
  108 00000098         
  109 00000098 F002 0202       AND              R2, R2, #0x2 ; Clear all but ch
                                                            eck bit c1
  110 0000009C EA43 0302       ORR              R3, R3, R2  ; Combine check bit
                                                             c1 with result
  111 000000A0         
  112 000000A0         ; Generate check bit c2
  113 000000A0         
  114 000000A0 EA83 0253       EOR              R2, R3, R3, LSR #1 ; Generate c
                                                            2 parity bit using 
                                                            parity tree
  115 000000A4 EA82 0292       EOR              R2, R2, R2, LSR #2 ; ... second
                                                             iteration ...
  116 000000A8 EA82 2212       EOR              R2, R2, R2, LSR #8 ; ... final 
                                                            iteration
  117 000000AC         
  118 000000AC F002 0208       AND              R2, R2, #0x8 ; Clear all but ch
                                                            eck bit c2



ARM Macro Assembler    Page 4 


  119 000000B0 EA43 0302       ORR              R3, R3, R2  ; Combine check bit
                                                             c2 with result 
  120 000000B4         
  121 000000B4         ; Generate check bit c3
  122 000000B4         
  123 000000B4 EA83 0253       EOR              R2, R3, R3, LSR #1 ; Generate c
                                                            3 parity bit using 
                                                            parity tree
  124 000000B8 EA82 0292       EOR              R2, R2, R2, LSR #2 ; ... second
                                                             iteration ...
  125 000000BC EA82 1212       EOR              R2, R2, R2, LSR #4 ; ... final 
                                                            iteration
  126 000000C0         
  127 000000C0 F002 0280       AND              R2, R2, #0x80 ; Clear all but c
                                                            heck bit c3
  128 000000C4 EA43 0302       ORR              R3, R3, R2  ; Combine check bit
                                                             c3 with result
  129 000000C8         
  130 000000C8         
  131 000000C8         
  132 000000C8         ;Compare the original value (with error) and the recalcu
                       lated value using exclusive-OR
  133 000000C8 EA80 0103       EOR              R1, R0, R3
  134 000000CC         
  135 000000CC         
  136 000000CC         ;Isolate the results of the EOR operatation to result in
                        a 4-bit calculation
  137 000000CC         
  138 000000CC         ;Clearing all bits apart from c7 and shifting bit 4 posi
                       tions right
  139 000000CC F04F 0480       LDR              R4, =0X80
  140 000000D0 EA04 0401       AND              R4, R4, R1
  141 000000D4 EA4F 1414       MOV              R4, R4, LSR #4
  142 000000D8         
  143 000000D8         ;Clearing all bits apart from c3 and shifting the 3rd bi
                       t 1 position right
  144 000000D8 F04F 0508       LDR              R5, =0X8
  145 000000DC EA05 0501       AND              R5, R5, R1
  146 000000E0 EA4F 0555       MOV              R5, R5, LSR #1
  147 000000E4         
  148 000000E4         ;Clearing all bits apart from c0 and c1  
  149 000000E4 F04F 0603       LDR              R6, =0X3
  150 000000E8 EA06 0601       AND              R6, R6, R1
  151 000000EC         
  152 000000EC         
  153 000000EC         ;Adding the 4 registers together 
  154 000000EC EB04 0105       ADD              R1, R4, R5
  155 000000F0 4431            ADD              R1, R1, R6
  156 000000F2         
  157 000000F2         ;Subtracting 1 from R1 to determine the bit position of 
                       the error
  158 000000F2 F1A1 0101       SUB              R1, R1, #1
  159 000000F6         
  160 000000F6         ;Store tmp register with binary 1. Then moves the 1, 8 b
                       it positions left.  We use '8' because R1 contains 8 bit
                       s
  161 000000F6 F04F 0701       LDR              R7, =0X1
  162 000000FA FA07 F701       MOV              R7, R7, LSL R1
  163 000000FE         



ARM Macro Assembler    Page 5 


  164 000000FE         ;Flips the bit in bit 8 of R0
  165 000000FE EA80 0007       EOR              R0, R0, R7
  166 00000102         
  167 00000102         ;Result =0x00000A6B
  168 00000102         
  169 00000102 E7FE    stop    B                stop
  170 00000104         
  171 00000104                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M7 --bi --apcs=i
nterwork --depend=.\objects\hamming.d -o.\objects\hamming.o -I"D:\git\ARM asm\R
TE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\CMSIS\Include -IC:\Keil_v5\ARM\
PACK\ARM\CMSIS\5.0.0-Beta4\Device\ARM\ARMCM7\Include --predefine="__EVAL SETA 1
" --predefine="__UVISION_VERSION SETA 521" --predefine="_RTE_ SETA 1" --predefi
ne="ARMCM7 SETA 1" --list=.\listings\hamming.lst Hamming.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Hamming 00000000

Symbol: Hamming
   Definitions
      At line 8 in file Hamming.s
   Uses
      None
Comment: Hamming unused
main 00000000

Symbol: main
   Definitions
      At line 14 in file Hamming.s
   Uses
      At line 12 in file Hamming.s
Comment: main used once
stop 00000102

Symbol: stop
   Definitions
      At line 169 in file Hamming.s
   Uses
      At line 169 in file Hamming.s
Comment: stop used once
3 symbols
337 symbols in table
