


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             HW5, CODE, READONLY
    2 00000000         
    3 00000000                 ENTRY
    4 00000000         
    5 00000000                 EXPORT           main
    6 00000000         
    7 00000000         main
    8 00000000         
    9 00000000 F04F 0400       MOV              R4, #0x0    ; Count-control
   10 00000004         
   11 00000004 F04F 0500       MOV              R5, #0x0    ; R5 will be used f
                                                            or holding the orgi
                                                            nal address of HexS
                                                            tr
   12 00000008         
   13 00000008 F04F 0600       MOV              R6, #0x0    ; R6 will hold the 
                                                            value of the intere
                                                            st
   14 0000000C         
   15 0000000C F04F 0700       MOV              R7, #0x0    ; R7 will hold the 
                                                            value that is being
                                                             converted.
   16 00000010         
   17 00000010 F04F 0800       MOV              R8, #0x0    ; R8 will hold over
                                                             all values.
   18 00000014         
   19 00000014 4D3D            LDR              R5, =HexStr ; R5 holds the addr
                                                            ess of HexStr
   20 00000016         
   21 00000016         Loop
   22 00000016         
   23 00000016 5D2E            LDRB             R6, [R5, R4] ; Holds the actual
                                                             value of interest.
                                                            
   24 00000018         
   25 00000018 2E00            CMP              R6, #0
   26 0000001A         
   27 0000001A D01A            BEQ              ToTwosComp  ; When R6 hits the 
                                                            null-terminator, 
   28 0000001C         ; branch to ToTwosComp
   29 0000001C         
   30 0000001C F104 0401       ADD              R4, #1      ; Increment after t
                                                            he iteration.
   31 00000020         
   32 00000020 2E30            CMP              R6, #48
   33 00000022         
   34 00000022 DB12            BLT              Invalid     ;If the R6 is great
                                                            er than 57, then th
                                                            e value is invalid.
                                                            
   35 00000024         
   36 00000024 2E46            CMP              R6, #70     ;If greater than im
                                                            mediate value 70, t
                                                            he value is invalid
                                                            
   37 00000026         
   38 00000026 DC10            BGT              Invalid
   39 00000028         
   40 00000028 2E41            CMP              R6, #65     ; To see if the val



ARM Macro Assembler    Page 2 


                                                            ue of the R6 is A-F
                                                            
   41 0000002A         
   42 0000002A DA08            BGE              As2Hex      ;Branch if R6(the v
                                                            alue of interest) i
                                                            s greater or equal 
                                                            to 41, which indeic
                                                            ates the character 
                                                            that is greater 'A'
                                                            
   43 0000002C         
   44 0000002C 2E39            CMP              R6, #57     ; To see if the val
                                                            ue of R6 is 0-9
   45 0000002E         
   46 0000002E DC0C            BGT              Invalid
   47 00000030         
   48 00000030 DDFF            BLE              As2Dec
   49 00000032         
   50 00000032         
   51 00000032         As2Dec
   52 00000032         
   53 00000032 F1A6 0730       SUB              R7, R6, #48
   54 00000036         
   55 00000036 EA4F 1808       LSL              R8, #4
   56 0000003A         
   57 0000003A 44B8            ADD              R8, R7
   58 0000003C         
   59 0000003C E008            B                ToLoop      ;Unconditionally br
                                                            anch to ToLoop, for
                                                             ASCII to Hexadecim
                                                            al value conversion
                                                             is not needed, if 
                                                            this block of code 
                                                            was executed.
   60 0000003E         
   61 0000003E         As2Hex
   62 0000003E         
   63 0000003E F1A6 0737       SUB              R7, R6, #55 ; R7 will hold the 
                                                            ASCII -> Hexa value
                                                             
   64 00000042         
   65 00000042 EA4F 1808       LSL              R8, #4
   66 00000046         
   67 00000046 44B8            ADD              R8, R7
   68 00000048         
   69 00000048 E002            B                ToLoop
   70 0000004A         
   71 0000004A         Invalid
   72 0000004A         
   73 0000004A F04F 3AFF       LDR              R10, =0xFFFFFFFF
   74 0000004E         
   75 0000004E DF11            SVC              #0x11
   76 00000050         
   77 00000050         ToLoop
   78 00000050         
   79 00000050 E7E1            B                Loop
   80 00000052         
   81 00000052         ToTwosComp
   82 00000052         



ARM Macro Assembler    Page 3 


   83 00000052 F8DF 90BC       LDR              R9, =TwosComp ; Temporary regis
                                                            ter where I will st
                                                            ore the address of 
                                                            TwosComp
   84 00000056         ; inorder to STR value of R8 into TwoComp address(becaus
                       e STR don't have a pseudo instruction.
   85 00000056         
   86 00000056 F8C9 8000       STR              R8, [R9]    ;Since, R8 has the 
                                                            converted value, I 
                                                            must move those val
                                                            ues into the RvsStr
                                                             Address, while per
                                                            forming the
   87 0000005A         ;division and storing.
   88 0000005A         
   89 0000005A F04F 0400       MOV              R4, #0      ; R4 is the count c
                                                            ontrol
   90 0000005E         
   91 0000005E F04F 0600       MOV              R6, #0      ; For the replaceme
                                                            nt quotient
   92 00000062         
   93 00000062 F8DF 90B0       LDR              R9, =RvsDecStr
   94 00000066         
   95 00000066 F8DF A0B0       LDR              R10, =DecStr
   96 0000006A         
   97 0000006A F1B8 4F00       CMP              R8, #0x80000000 ;I only compare
                                                             the values which i
                                                            s MSB...
   98 0000006E         
   99 0000006E D544            BPL              IsNeg
  100 00000070         
  101 00000070         NegEvalComp
  102 00000070         
  103 00000070 4645            MOV              R5, R8      ;Move the value of 
                                                            the R8 into the R5,
                                                             so R5 evaluation d
                                                            oesn't touch the R8
                                                            
  104 00000072         
  105 00000072         ToRvsStr
  106 00000072         
  107 00000072 E03B            B                Subtract
  108 00000074         
  109 00000074         EvalSubComp
  110 00000074         
  111 00000074         ;After the R5's evaluation is complete,
  112 00000074         ;then what I want to store that value into the remainder
                       .
  113 00000074         
  114 00000074 F105 0530       ADD              R5, '0'
  115 00000078         
  116 00000078 F809 5004       STRB             R5, [R9, R4]
  117 0000007C         
  118 0000007C F1A5 0530       SUB              R5, '0'
  119 00000080         
  120 00000080 F104 0401       ADD              R4, #1
  121 00000084         
  122 00000084 4635            MOV              R5, R6
  123 00000086         



ARM Macro Assembler    Page 4 


  124 00000086 46B0            MOV              R8, R6
  125 00000088         
  126 00000088 F04F 0600       MOV              R6, #0
  127 0000008C         
  128 0000008C F1B8 0F0A       CMP              R8, #10
  129 00000090         
  130 00000090 DB01            BLT              LastStr
  131 00000092         
  132 00000092 E7EE            B                ToRvsStr
  133 00000094         
  134 00000094         DoneLastStr
  135 00000094         
  136 00000094 E009            B                DONE_RvsStr
  137 00000096         
  138 00000096         LastStr
  139 00000096         
  140 00000096 F108 0830       ADD              R8, '0'
  141 0000009A         
  142 0000009A F1B8 0F30       CMP              R8, '0'
  143 0000009E         
  144 0000009E D0F9            BEQ              DoneLastStr
  145 000000A0         
  146 000000A0 F809 8004       STRB             R8, [R9, R4]
  147 000000A4         
  148 000000A4 F104 0401       ADD              R4, #1
  149 000000A8         
  150 000000A8 E7F4            B                DoneLastStr
  151 000000AA         
  152 000000AA         DONE_RvsStr
  153 000000AA         
  154 000000AA F1BC 0F01       CMP              R12, #1
  155 000000AE         
  156 000000AE BF08 252D       MOVEQ            R5, '-'
  157 000000B2         
  158 000000B2 D000            BEQ              HasSign
  159 000000B4         
  160 000000B4 E004            B                NoSign
  161 000000B6         
  162 000000B6         HasSign                              ; If has sign, then
                                                             add sign and null-
                                                            ter
  163 000000B6         
  164 000000B6 F809 5004       STRB             R5, [R9, R4]
  165 000000BA         
  166 000000BA F104 0401       ADD              R4, #1
  167 000000BE         
  168 000000BE E008            B                ToDecStr
  169 000000C0         
  170 000000C0         NoSign                               ; If no sign, then 
                                                            put null ter then b
                                                            reak
  171 000000C0         
  172 000000C0 F04F 0500       MOV              R5, #0
  173 000000C4         
  174 000000C4 F104 0401       ADD              R4, #1
  175 000000C8         
  176 000000C8 F809 5004       STRB             R5, [R9, R4]
  177 000000CC         
  178 000000CC E001            B                ToDecStr



ARM Macro Assembler    Page 5 


  179 000000CE         
  180 000000CE         InnitToDecStr
  181 000000CE         
  182 000000CE F04F 0600       MOV              R6, #0      ;The counter
  183 000000D2         
  184 000000D2         ToDecStr
  185 000000D2         
  186 000000D2         ;The plan is the R4 needs to keep being subtracted one b
                       y one
  187 000000D2         ;And the new counter needs to increment again and again.
                       
  188 000000D2         
  189 000000D2 F819 5004       LDRB             R5, [R9, r4]
  190 000000D6         
  191 000000D6 2D00            CMP              R5, #0
  192 000000D8         
  193 000000D8 D005            BEQ              NullTerSkip
  194 000000DA         
  195 000000DA F80A 5006       STRB             R5, [R10, R6]
  196 000000DE         
  197 000000DE F106 0601       ADD              R6, #1
  198 000000E2         
  199 000000E2 2C00            CMP              R4, 0
  200 000000E4         
  201 000000E4 D010            BEQ              Done
  202 000000E6         
  203 000000E6         NullTerSkip
  204 000000E6         
  205 000000E6 F1A4 0401       SUB              R4, #1
  206 000000EA         
  207 000000EA E7F2            B                ToDecStr
  208 000000EC         
  209 000000EC         Subtract
  210 000000EC         
  211 000000EC 2D0A            CMP              R5, #10
  212 000000EE         
  213 000000EE DBC1            BLT              EvalSubComp
  214 000000F0         
  215 000000F0 F1A5 050A       SUB              R5, #10
  216 000000F4         
  217 000000F4 F106 0601       ADD              R6, #1
  218 000000F8         
  219 000000F8 E7F8            B                Subtract
  220 000000FA         
  221 000000FA         IsNeg
  222 000000FA         
  223 000000FA EA6F 0808       MVN              R8, R8      ;Flipping
  224 000000FE         
  225 000000FE F108 0801       ADD              R8, #1      ;Adding one
  226 00000102         
  227 00000102 F04F 0C01       MOV              R12, #1
  228 00000106         
  229 00000106 E7B3            B                NegEvalComp
  230 00000108         
  231 00000108         Done
  232 00000108         
  233 00000108 DF11            SVC              #0x11
  234 0000010A         
  235 0000010A 00 00 00000000 



ARM Macro Assembler    Page 6 


              00000000 
              00000000 
              00000000         AREA             HW5D, DATA, READWRITE
  236 00000000         
  237 00000000                 EXPORT           adrHexStr
  238 00000000         
  239 00000000                 EXPORT           adrTwosComp
  240 00000000         
  241 00000000                 EXPORT           adrDecStr
  242 00000000         
  243 00000000                 EXPORT           adrRvsDecStr
  244 00000000         
  245 00000000 46 46 46 
              34 42 33 
              46 41 00 HexStr  DCB              "FFF4B3FA", 0
  246 00000009         
  247 00000009 00 00 00 
              00000000 TwosComp
                               DCD              0
  248 00000010         
  249 00000010 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 DecStr  SPACE            12
  250 0000001C         
  251 0000001C 00 00 00 
              00 00 00 
              00 00 00 
              00 00    RvsDecStr
                               SPACE            11
  252 00000027         
  253 00000027 00 00000000 
                       adrHexStr
                               DCD              HexStr
  254 0000002C         
  255 0000002C 00000000 
                       adrTwosComp
                               DCD              TwosComp
  256 00000030         
  257 00000030 00000000 
                       adrDecStr
                               DCD              DecStr
  258 00000034         
  259 00000034 00000000 
                       adrRvsDecStr
                               DCD              RvsDecStr
  260 00000038         
  261 00000038                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M7 --bi --apcs=i
nterwork --depend=.\objects\homework5_after_fri.d -o.\objects\homework5_after_f
ri.o -I"D:\git\ARM asm\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\CMSIS\I
nclude -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0-Beta4\Device\ARM\ARMCM7\Include --
predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 521" --predefine=
"_RTE_ SETA 1" --predefine="ARMCM7 SETA 1" --list=.\listings\homework5_after_fr
i.lst Homework5_After_Fri.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

As2Dec 00000032

Symbol: As2Dec
   Definitions
      At line 51 in file Homework5_After_Fri.s
   Uses
      At line 48 in file Homework5_After_Fri.s
Comment: As2Dec used once
As2Hex 0000003E

Symbol: As2Hex
   Definitions
      At line 61 in file Homework5_After_Fri.s
   Uses
      At line 42 in file Homework5_After_Fri.s
Comment: As2Hex used once
DONE_RvsStr 000000AA

Symbol: DONE_RvsStr
   Definitions
      At line 152 in file Homework5_After_Fri.s
   Uses
      At line 136 in file Homework5_After_Fri.s
Comment: DONE_RvsStr used once
Done 00000108

Symbol: Done
   Definitions
      At line 231 in file Homework5_After_Fri.s
   Uses
      At line 201 in file Homework5_After_Fri.s
Comment: Done used once
DoneLastStr 00000094

Symbol: DoneLastStr
   Definitions
      At line 134 in file Homework5_After_Fri.s
   Uses
      At line 144 in file Homework5_After_Fri.s
      At line 150 in file Homework5_After_Fri.s

EvalSubComp 00000074

Symbol: EvalSubComp
   Definitions
      At line 109 in file Homework5_After_Fri.s
   Uses
      At line 213 in file Homework5_After_Fri.s
Comment: EvalSubComp used once
HW5 00000000

Symbol: HW5
   Definitions
      At line 1 in file Homework5_After_Fri.s
   Uses
      None
Comment: HW5 unused
HasSign 000000B6




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: HasSign
   Definitions
      At line 162 in file Homework5_After_Fri.s
   Uses
      At line 158 in file Homework5_After_Fri.s
Comment: HasSign used once
InnitToDecStr 000000CE

Symbol: InnitToDecStr
   Definitions
      At line 180 in file Homework5_After_Fri.s
   Uses
      None
Comment: InnitToDecStr unused
Invalid 0000004A

Symbol: Invalid
   Definitions
      At line 71 in file Homework5_After_Fri.s
   Uses
      At line 34 in file Homework5_After_Fri.s
      At line 38 in file Homework5_After_Fri.s
      At line 46 in file Homework5_After_Fri.s

IsNeg 000000FA

Symbol: IsNeg
   Definitions
      At line 221 in file Homework5_After_Fri.s
   Uses
      At line 99 in file Homework5_After_Fri.s
Comment: IsNeg used once
LastStr 00000096

Symbol: LastStr
   Definitions
      At line 138 in file Homework5_After_Fri.s
   Uses
      At line 130 in file Homework5_After_Fri.s
Comment: LastStr used once
Loop 00000016

Symbol: Loop
   Definitions
      At line 21 in file Homework5_After_Fri.s
   Uses
      At line 79 in file Homework5_After_Fri.s
Comment: Loop used once
NegEvalComp 00000070

Symbol: NegEvalComp
   Definitions
      At line 101 in file Homework5_After_Fri.s
   Uses
      At line 229 in file Homework5_After_Fri.s
Comment: NegEvalComp used once
NoSign 000000C0

Symbol: NoSign



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 170 in file Homework5_After_Fri.s
   Uses
      At line 160 in file Homework5_After_Fri.s
Comment: NoSign used once
NullTerSkip 000000E6

Symbol: NullTerSkip
   Definitions
      At line 203 in file Homework5_After_Fri.s
   Uses
      At line 193 in file Homework5_After_Fri.s
Comment: NullTerSkip used once
Subtract 000000EC

Symbol: Subtract
   Definitions
      At line 209 in file Homework5_After_Fri.s
   Uses
      At line 107 in file Homework5_After_Fri.s
      At line 219 in file Homework5_After_Fri.s

ToDecStr 000000D2

Symbol: ToDecStr
   Definitions
      At line 184 in file Homework5_After_Fri.s
   Uses
      At line 168 in file Homework5_After_Fri.s
      At line 178 in file Homework5_After_Fri.s
      At line 207 in file Homework5_After_Fri.s

ToLoop 00000050

Symbol: ToLoop
   Definitions
      At line 77 in file Homework5_After_Fri.s
   Uses
      At line 59 in file Homework5_After_Fri.s
      At line 69 in file Homework5_After_Fri.s

ToRvsStr 00000072

Symbol: ToRvsStr
   Definitions
      At line 105 in file Homework5_After_Fri.s
   Uses
      At line 132 in file Homework5_After_Fri.s
Comment: ToRvsStr used once
ToTwosComp 00000052

Symbol: ToTwosComp
   Definitions
      At line 81 in file Homework5_After_Fri.s
   Uses
      At line 27 in file Homework5_After_Fri.s
Comment: ToTwosComp used once
main 00000000




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: main
   Definitions
      At line 7 in file Homework5_After_Fri.s
   Uses
      At line 5 in file Homework5_After_Fri.s
Comment: main used once
22 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DecStr 00000010

Symbol: DecStr
   Definitions
      At line 249 in file Homework5_After_Fri.s
   Uses
      At line 95 in file Homework5_After_Fri.s
      At line 257 in file Homework5_After_Fri.s

HW5D 00000000

Symbol: HW5D
   Definitions
      At line 235 in file Homework5_After_Fri.s
   Uses
      None
Comment: HW5D unused
HexStr 00000000

Symbol: HexStr
   Definitions
      At line 245 in file Homework5_After_Fri.s
   Uses
      At line 19 in file Homework5_After_Fri.s
      At line 253 in file Homework5_After_Fri.s

RvsDecStr 0000001C

Symbol: RvsDecStr
   Definitions
      At line 251 in file Homework5_After_Fri.s
   Uses
      At line 93 in file Homework5_After_Fri.s
      At line 259 in file Homework5_After_Fri.s

TwosComp 0000000C

Symbol: TwosComp
   Definitions
      At line 247 in file Homework5_After_Fri.s
   Uses
      At line 83 in file Homework5_After_Fri.s
      At line 255 in file Homework5_After_Fri.s

adrDecStr 00000030

Symbol: adrDecStr
   Definitions
      At line 257 in file Homework5_After_Fri.s
   Uses
      At line 241 in file Homework5_After_Fri.s
Comment: adrDecStr used once
adrHexStr 00000028

Symbol: adrHexStr
   Definitions
      At line 253 in file Homework5_After_Fri.s
   Uses
      At line 237 in file Homework5_After_Fri.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: adrHexStr used once
adrRvsDecStr 00000034

Symbol: adrRvsDecStr
   Definitions
      At line 259 in file Homework5_After_Fri.s
   Uses
      At line 243 in file Homework5_After_Fri.s
Comment: adrRvsDecStr used once
adrTwosComp 0000002C

Symbol: adrTwosComp
   Definitions
      At line 255 in file Homework5_After_Fri.s
   Uses
      At line 239 in file Homework5_After_Fri.s
Comment: adrTwosComp used once
9 symbols
367 symbols in table
